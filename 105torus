#!/usr/bin/python3
# -*- conding utf -8 -8-

from math import *
import sys

class Torus:
    def __init__(self):
        self.opt = int(sys.argv[1])
        self.a0 = int(sys.argv[2])
        self.a1 = int(sys.argv[3])
        self.a2 = int(sys.argv[4])
        self.a3 = int(sys.argv[5])
        self.a4 = int(sys.argv[6])
        self.n = int(sys.argv[7])
        if (self.a1 == 0 and self.a2 ==0 and self.a3 == 0 and self.a4 == 0 or self.n < 0):
            exit (84)
        if self.opt <= 0 or self.opt > 3:
            print("error")
            exit (84)

    def function(self, x):
        return (self.a4 * pow(x, 4) + self.a3 * pow(x, 3) + self.a2 * pow(x, 2) + self.a1 * x  + self.a0)

    def fderiv(self, x):
        return (4 * self.a4 * pow(x, 3) + 3 * self.a3 * pow(x, 2) + 2 * self.a2 * x + self.a1)

    def geter_opt(self):
        return self.opt

    def display(self, s):
        if pow(10, self.n) * s % 1 == 0:
            print("x =", s)
        else:
            print("x = %.*f" % (self.n, s))

    def bissection_method(self):
        a = 0
        b = 1
        c = 0
        s = 1
        while abs(c - s) > pow(10, -self.n):
            s = c
            c = (a + b)/ 2
            if self.function(a) * self.function(c) < 0:
                b = c
            else:
                a = c
            self.display(c)

    def newton_method(self):
        s = 0.5
        c = 0
        counter = 0
        while abs(c - s) > pow(10, -self.n):
            c = s
            counter += 1
            self.display(s)
            s = s - (self.function(s) / self.fderiv(s))
            if (counter > 15):
                print('\nError divergence')
                exit(84)

    def secant_method(self):
        a = 0
        b = 1
        while abs(a - b) > pow(10, -self.n):
            s = b - ((b - a) / (self.function(b) - self.function(a))) * self.function(b)
            a = b
            b = s
            self.display(s)

if __name__ == '__main__':
    if (len(sys.argv) != 8):
        print("error")
        exit (84)
    tor = Torus()
    opt = tor.geter_opt()
    if opt == 1:
        tor.bissection_method()
    elif opt == 2:
        tor.newton_method()
    elif opt == 3:
        tor.secant_method()